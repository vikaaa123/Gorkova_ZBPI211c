# 1

def fact(x):
   if x == 0:
    return 1
  else:
    return (x * fact(x-1))

# 2
def filter_even(li):
  return filter(lambda x : x % 2 == 0, li)
  
# 3

def square(li):
  total_list = list(map(lambda x: x*x, li))
  return total_list

# 4

def bin_search(li, element):
    i = 0
    l = len(li)
    while i <= l:
        sr = (i + l) // 2
        if li[sr] == element:
            return sr
        if element < li[sr]:
            l = sr - 1
        else:
          continue
# 5

def is_palindrome(string):
    string = string.replace(" ", "")
    string = string.lower()
    string = "".join(list(filter(lambda x: x.isalpha(), string)))
    left = 0
    right = len(string) - 1
    count_equality = 0
    while left != right:
        if (string[left] == string[right]):
            count_equality += 1
        else:
            return "NO"
        if left > right:
            break
        left += 1
        right -= 1
    return "YES"

# 6

def calculate(path2file):

    file = open(path2file, 'r')

    operations_list = ["+", "-", "*", "//", "%", "**"]
    result_list = []

    count_iter = 1

    for _str in file.readlines():

        split_list = _str.split("    ")

        if len(split_list) != 3:
            return "Ошибка файл не соответствует формату, указанному в ТЗ"

        if not split_list[0] in operations_list:
            return "Ошибка! Математическая операция не найдена в строке " + str(count_iter)

        try:
            check = int(split_list[1])
        except:
            return "Ошибка! Значение №1 не является целым числом в строке " + str(count_iter)

        try:
            check = int(split_list[2])
        except:
            return "Ошибка! Значение №2 не является целым числом в строке " + str(count_iter)

        result_operate = eval(split_list[1] + split_list[0] + split_list[2])
        result_list.append(str(result_operate))

        count_iter += 1


    result_str = ",".join(result_list)

    f_result = open('output1.txt', 'w')
    f_result.write(result_str)
    f_result.close()

    file.close()

    return result_str
    
# 7

def substring_slice(path2file_1,path2file_2):

    file1 = open(path2file_1, 'r')
    file2 = open(path2file_2, 'r')

    str_list_file1 = file1.readlines()
    str_list_file2 = file2.readlines()

    result_list = []
    count_iter = 0

    for _str in str_list_file1:

        split_list = str_list_file2[count_iter].split(" ")

        if len(split_list) != 2:
            return "Ошибка файл №2 не соответствует формату, указанному в ТЗ"

        try:
            check = int(split_list[0])
            if (check < 0):
                raise ""
        except:
            return "Ошибка! Значение №1 в файле №2 не является целым положительным числом (т.е. индексом) в строке " + str(
                count_iter + 1)

        try:
            check = int(split_list[1])
            if (check < 0):
                raise ""
        except:
            return "Ошибка! Значение №2 в файле №2 не является целым положительным числом (т.е. индексом) в строке " + str(
                count_iter + 1)

        if int(split_list[0]) > int(split_list[1]):
            return "Ошибка! Значение №1 должно быть меньше или равно значения №2 в файле №2 в строке " + str(
                count_iter + 1)

        if int(split_list[0]) > len(_str):
            return "Ошибка! Значение №1 в файле №2 должно быть меньше длины строки в файле №1. Строка: " + str(
                count_iter + 1)
        if int(split_list[1]) > len(_str):
            return "Ошибка! Значение №2 в файле №2 должно быть меньше длины строки в файле №1. Строка: " + str(
                count_iter + 1)

        result_operate = _str[int(split_list[0]):int(split_list[1]) + 1]
        result_list.append(str(result_operate))

        count_iter += 1

    result_str = " ".join(result_list)

    f_result = open('output2.txt', 'w')
    f_result.write(result_str)
    f_result.close()

    file1.close()
    file2.close()

    return
    
# 8

def decode_ch(sting_of_elements):

    try:
        periodic_table = json.load(open('periodic_table.json', "r", encoding="utf-8"))
    except:
        return "Ошибка чтения JSON"

    check = 0
    list_ch = []
    str_ch = ""
    count = 1
    for ch in sting_of_elements:

        if ch.isupper():
            check += 1
            if check == 2:
                list_ch.append(str_ch)
                check = 1
                str_ch = ""
        str_ch += ch
        if count == len(sting_of_elements):
            list_ch.append(str_ch)
        count += 1

    result_str_ch = ""
    for ch in list_ch:
        try:
            result_str_ch += periodic_table.get(ch)
        except:
            return "Элемент " + ch + " не найден в таблице"

    return

# 9

   def __init__(self, name, surname, grades=[3, 4, 5]):


        self.name = name
        self.surname = surname
        self.fullname = name + " " + surname
        self.grades = grades

    def greeting(self):
        return "Hello, I am Student"

    def mean_grade(self):
        return round(mean(self.grades), 2)

    def is_otlichnik(self):
        if self.mean_grade() >= 4.5:
            return "YES"
        else:
            return "NO"

    def __add__(self, other):
        if isinstance(other, Student):
            return self.name + " is friends with " + other.name
        else:
            return "Второй объект не является экземпляром класса Student!"

    def __str__(self):
        if hasattr(self, "fullname"):
            return self.fullname
# 10

class MyError(Exception):
  def __init__(self, msg):
    self.msg = msg
